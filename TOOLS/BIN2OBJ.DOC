  ÜÜÜÜÜÜ  ÜÜÜÜÜ ÜÜÜ ÜÜÜ       ÜÜÜÜÜÜÜ ÜÜÜÜÜÜÜ       ÜÜÜÜÜÜÜ ÜÜÜÜÜÜ      ÜÜÜ
  Û.ÜÜ.ÛÜ ÛÜ.ÜÛ Û.ßÛÛ.Û ÜÜÜÜÜ ÛÜÜ.ÜÜÛ Û.ÜÜÜ.Û ÜÜÜÜÜ Û.ÜÜÜ.Û Û.ÜÜ.ÛÜ     Û.Û
  Û.ÜÜÜ.Û ÜÛ.ÛÜ Û.ÛÜß.Û ÛÜÜÜÛ   Û.Û   Û.ÛÜÛ.Û ÛÜÜÜÛ Û.ÛÜÛ.Û Û.ÜÜÜ.Û ÛßÛÜÛ.Û
  ÛÜÜÜÜÜÛ ÛÜÜÜÛ ÛÜÛßÛÜÛ         ÛÜÛ   ÛÜÜÜÜÜÛ       ÛÜÜÜÜÜÛ ÛÜÜÜÜÜÛ ÛÜÜÜÜÜÛ

              >>> V1.00á1 - Released the 23th of July, 1994 <<<

 (C)opyright : Mads Orbesen Troest ("Marvin") & The SIRIUS CYBERNETICS Corp.

       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

This   program   is  Public  Domain  and   the  author  hereby  disclaims  any
resposibility  for  what might or might  not  happen when you use BIN2OBJ.EXE.
This product has, however, been tested under several circumstances without any
sort of errors occurring, if you should discover any please inform the author.

BIN2OBJ  may be copied freely to anybody as  long as no fee is charged and the
original  archive  remains unchanged. This DOC  file MUST be distributed along
with the converter.

Though this product has been released as Public Domain the author will be very
happy to hear from people using BIN2OBJ. And if you really, really, REALLY use
BIN2OBJ, and are very, very, VERY rich, feel free to send me a little token of
your appreciation... ;-)

       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



þ WHAT'S IT ALL ABOUT
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
BIN2OBJ.EXE  is  a  neat  little utility  that  allows  you  to convert Binary
datafiles  to OBJect files for linking  external data onto program code. Like,
say, drivers, fonts, graphics, fish-recipes or any other kind of binary data.

"Now,  why can't I just use the BINOBJ utility supplied with most of Borland's
programming products?"

Well, frankly, because it is a quite bad utility which lacks several important
things. Here are a couple of explicit examples:

þ Borland's  BINOBJ is not able to convert  files bigger than 64 Kb. (it can't
  even  show the correct number of  bytes converted when handling files bigger
  than  $8000  bytes) - The [SCC] BIN2OBJ  (of course) has no troubles what so
  ever splitting large files into multiple (but still linked) Segments.

þ Borland's  BINOBJ  does not allow you to  specify  the name and class of the
  generated  Segment! Of course you need to  be able to define these names! At
  least  because Segments with the same name  and class will be grouped into 1
  Segment  by  a linker. This is not always  - in fact seldom - what you want.
  The [SCC] BIN2OBJ allows you to (optionally) specify these names...

þ Borland's  BINOBJ  always uses byte-alignment  for  its destination Segment.
  This can in many cases be quite annoying, since you often may want your data
  to  start  at a "clean" Segment-address.  The  [SCC] BIN2OBJ by default uses
  Segment-alignment - which is the type most commonly used - but can of course
  be  instructed  (through  a switch) to use  byte  or  word alignment for its
  destination Segment(s).



þ COMMANDLINE PARAMETERS
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
BIN2OBJ.EXE <InFile> <OutFile> <PublicName> [Segment] [Class] [-|/<Switch>...]

<>  Mandatory,  []  Optional, | Or. Switches are  preceded  by  a "/" or a "-"
character, and may appear in any order and any case...

?|H       : Help
A<B|W|P>  : Segment Alignment Byte/Word/Paragraph (Default)
D         : Disable generation of multiple Segments if InFile is > than 64 Kb.
R         : Replace OutFile if it already exists.



þ ERRORLEVELS
ÄÄÄÄÄÄÄÄÄÄÄÄÄ
$01 (#1)  : InFile Not Specified (Specify InFile)
$02 (#2)  : OutFile Not Specified (Specify OutFile)
$03 (#3)  : PublicName Not Specified (Specify PublicName)
$04 (#4)  : Illegal Segment Alignment (Use A switch followed by B, W or P)
$10 (#16) : Error Reading InFile (File Not Found or Disk Error)
$11 (#17) : Error Writing OutFile (Illegal FileName or Disk Error)
$12 (#18) : OutFile Already Exists (Use R switch to Replace)
$13 (#19) : InFile cannot fit single Segment (Do not use D switch)



þ EXAMPLES
ÄÄÄÄÄÄÄÄÄÄ
BIN2OBJ.EXE /?

This will show the converters quick-help screen. You can also use a H switch.

BIN2OBJ.EXE CTVOICE.DRV CTVOICE.OBJ CTVOICE -AP

This  will  convert  CTVOICE.DRV to an OBJ  file  referred  to as CTVOICE. The
module will be Paragraph aligned. The -AP switch is not really necessary since
the converter will use it by default.

BIN2OBJ.EXE MEGAFISH.PCX PICTURE.OBJ PIC_DATA GFX_SEGMENT DATA /AB /D

This  will  convert  MEGAFISH.PCX  to the  OBJ  file  PICTURE  (referred to as
PIC_DATA).  The Segment will be called GFX_SEGMENT and the class will be DATA.
The  module  will  be  Byte aligned, and  since  the  /D switch is present the
converter will not accept the picture if it can't fit into 1 Segment.

BIN2OBJ.EXE MONTY.TXT MONTY.OBJ TEXT D_SEG0 -AW /R

This will convert MONTY.TXT to an OBJ file referred to as TEXT. The Segment(s)
will be named D_SEG0 and are aligned on Word boundaries. If the file MONTY.OBJ
already exists it will be brutally overwritten... ;-)

       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  Feel free to contact me for suggestions/comments/questions or whatever...

                                 Reach me at:

                             Mads Orbesen Troest
                             Indkildevej 15, TH
                             DK-9210 Aalborg SOE
                             Denmark

                             Phone : (DK)+9814 8137
                             Fido  : 2:238/10.15
                             CM-Net: 10:450/100.4
                             Inter : d2x@dc5101.aalborges.dk
                             WWW   : http://www.aalborges.dk/~d2x

                              (MARVIN.23.07.94)

       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ÚÂÄÄ¿ Ú¿ ÚÂÄÄ¿ Ú¿ Ú¿  ¿ ÚÂÄÄ¿
ÀÁÄÂ¿ Ã´ ÃÅÄÂÙ Ã´ Ã´  ³ ÀÁÄÂ¿
ÀÄÄÁÙ ÀÙ ÀÙ À  ÀÙ ÀÁÄÄÙ ÀÄÄÁÙ
              ÚÂÄÄ¿ Ú¿ Ú¿ ÚÂÄ¿  ÚÂÄÄ¿ ÚÂÄÄ¿ ÚÂÄ¿ ¿ ÚÂÄÄ¿ ÚÄÂÂÄ¿ Ú¿ ÚÂÄÄ¿ ÚÂÄÄ¿
              Ã´    ÀÁÄÅ´ ÃÅÄÁ¿ ÃÅÄ   ÃÅÄÂÙ Ã´ ³ ³ ÃÅÄ     Ã´   Ã´ Ã´    ÀÁÄÂ¿
              ÀÁÄÄÙ ÀÄÄÁÙ ÀÁÄÄÙ ÀÁÄÄÙ ÀÙ À  ÀÙ ÀÄÙ ÀÁÄÄÙ   ÀÙ   ÀÙ ÀÁÄÄÙ ÀÄÄÁÙ

                     >>> Live Through The SubEtha... <<<
